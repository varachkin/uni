"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Swipe = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _isDate2 = _interopRequireDefault(require("lodash/isDate"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _Member = require("./Member");

var _Membership = require("./Membership");

var _Session = require("./Session");

var _log = require("../log");

var _Model = require("./Model");

var _moment = _interopRequireDefault(require("moment"));

var _app = require("../app");

class Swipe extends _Model.Model {
  /**
   * @property id
   *
   * Unique Swipe ID.
   *
   * @type {string}
   */

  /**
   * @property stationId
   *
   * The id of the station that originated this event.
   *
   * @type {string}
   */

  /**
   * @property error
   *
   * Error message, if there was a problem with this event.
   *
   * @type {string}
   */

  /**
   * @property memberId
   *
   * The Member ID of the user that initiated this event.
   *
   * @type {string}
   */

  /**
   * @property membershipId
   *
   * The Membership ID that this event is associated to.
   *
   * @type {string}
   */

  /**
   * @property sessionId
   *
   * The Session ID that this event is associated to.
   *
   * @type {string}
   */
  get sessionId() {
    return this.session.id;
  }
  /**
   * @property session
   *
   * The Session that this event is associated to.
   *
   * @type {Session}
   */

  /**
   * @property member
   *
   * Member record.  Will be populated when this event is sent to
   * a browser, if the event has a `memberId`.
   *
   * @type {Member}
   */

  /**
   * @property card
   *
   * The card that was swiped.
   *
   * @type {string}
   */

  /**
   * @property valid
   *
   * Is this a good swipe for a valid card?
   *
   * @type {boolean}
   */


  constructor(options = {}) {
    const {
      session
    } = options,
          opts = (0, _objectWithoutProperties2.default)(options, ["session"]);
    super(opts);
    if (session) this.session = new _Session.Session(session);
  }
  /**
   * The member object for the member associated with this swipe.
   *
   * @type {Member}
   */


  get member() {
    return this.session && this.session.getMember(this.memberId);
  }
  /**
   * The membership object for the membership associated with this swipe.
   *
   * @type {Membership}
   */


  get membership() {
    return this.session && this.session.membership;
  }
  /**
   * Time that the event was collected by the reader.
   *
   * @type {moment}
   */


  get readerTime() {
    return (0, _moment.default)(this._readerTime);
  }

  set readerTime(time) {
    this._readerTime = to_time(time);
  }
  /**
   * Time that the event was emitted to the server from the reader.
   *
   * @type {moment}
   */


  get emitTime() {
    return (0, _moment.default)(this._emitTime);
  }

  set emitTime(time) {
    this._emitTime = to_time(time);
  }
  /**
   * Time that the event was processed and validated by the server.
   *
   * @type {moment}
   */


  get serverTime() {
    return (0, _moment.default)(this._serverTime);
  }

  set serverTime(time) {
    this._serverTime = to_time(time);
  }

  getDefaultAction() {
    if (this.session) {
      // There is an active session for this membership
      if (this.session.isPresent(this.memberId)) {
        // TODO - If the swiping member is the only adult present, then
        // default to "sign everyone out"
        // The member that has swiped is part of that session
        return {
          event: 'member-out',
          memberId: this.memberId,
          label: 'sign out'
        };
      } else {
        // The member that has swiped is not part of that session
        return {
          event: 'member-out',
          memberId: this.memberId,
          label: 'sign in'
        };
      }
    } else {
      return {
        event: 'member-in',
        memberId: this.memberId,
        label: 'sign in'
      };
    }
  }
  /*
  get ident() {
    // TODO - allow for other ident methods
    return _.pick( this, 'memberId', 'card' );
  }
   send( data ) {
    _.assign( data, {
      membershipId    : this.membershipId,
      sessionId       : this.id,
      ident           : this.ident,
    } );
    // log.debug( 'SENDING SWIPE RESPONSE', data );
    return this.constructor.sender( this.sessionId, data ).then( newdata => {
      this.session = new Session( newdata );
      this.emit( 'updated', this );
      return this.session;
    } );
  }
   static sender( id, data ) {
    return getApp().service( 'sessions' ).patch( id, data );
    / *
    const request = require( 'request-promise' );
    return request( {
      method    : 'POST',
      baseUrl   : 'http://localhost:4000/',
      uri       : `/swipes/${id}`,
      json      : true,
      simple    : true,
      body      : data,
    } ).then( res => this.hydrate( res ) );
    * /
  }
  */


}

exports.Swipe = Swipe;

function to_time(time) {
  if ((0, _isNil2.default)(time) || (0, _isNumber2.default)(time)) return time;
  if (_moment.default.isMoment(time)) return time.unix();
  if ((0, _isDate2.default)(time)) return time.getTime() / 1000;
  throw new Error(`Invalid date/time "${time}"`);
}
//# sourceMappingURL=Swipe.js.map