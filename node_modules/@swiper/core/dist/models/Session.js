"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Session = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _findLast2 = _interopRequireDefault(require("lodash/findLast"));

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _find2 = _interopRequireDefault(require("lodash/find"));

var _each2 = _interopRequireDefault(require("lodash/each"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _assign2 = _interopRequireDefault(require("lodash/assign"));

var _Model = require("./Model");

var _Guest = require("./Guest");

var _Member = require("./Member");

var _Membership = require("./Membership");

var _Swipe = require("./Swipe");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// import { log } from '../log';
class Session extends _Model.Model {
  /**
   * @property id
   *
   * The Session ID.
   *
   * @type {string}
   */

  /**
   * @property swipe
   *
   * The Swipe event that initiated the interaction with this session.
   * This is needed internally to implement some of the `send`
   * functionality, but should not be needed otherwise.
   *
   * @type {Swipe}
   */

  /**
   * @property membershipId
   *
   * The membership id associated with this session.
   *
   * @type {string}
   */
  get membershipId() {
    return this.id.split('@')[1];
  }
  /**
   * @property membership
   *
   * The membership associated with this session.
   *
   * @type {Membership}
   */

  /**
   * @property members
   *
   * Member records of members associated with the membership of this
   * session..
   *
   * @type {Member[]}
   */

  /**
   * @property friends
   *
   * Member records of friends that are associated with this session.
   *
   * @type {Member[]}
   */

  /**
   * @property guests
   *
   * Guest records of guests that are associated with this session.
   *
   * @type {Guest[]}
   */

  /**
   * @property events
   *
   * Events of this session.
   *
   * @type {object[]}
   */


  constructor(options = {}) {
    super({});
    this.rebuild(options);
  }

  rebuild(options = {}) {
    const {
      members,
      friends,
      guests
    } = options,
          opts = (0, _objectWithoutProperties2.default)(options, ["members", "friends", "guests"]);
    (0, _assign2.default)(this, opts);
    this.members = (0, _map2.default)(members, member => {
      return new _Member.Member(_objectSpread({}, member, {
        relation: 'family'
      }));
    });
    this.friends = (0, _map2.default)(friends, friend => {
      return new _Member.Member(_objectSpread({}, friend, {
        relation: 'friend'
      }));
    });
    this.guests = (0, _map2.default)(guests, guest => {
      return new _Guest.Guest(_objectSpread({}, guest, {
        relation: 'guest'
      }));
    });
    (0, _each2.default)(this.people, person => {
      if (!person.displayName) {
        // TODO - Make the options for what populates displayName
        // configurable
        person.displayName = person.firstName || person.name;
      }
    });
  }

  get people() {
    return [].concat(this.members, this.friends, this.guests);
  }

  getMember(id) {
    return (0, _find2.default)(this.members, {
      id
    });
  }

  getFriend(id) {
    return (0, _find2.default)(this.friends, {
      id
    });
  }

  getGuest(id) {
    return (0, _find2.default)(this.guests, {
      id
    });
  }

  getPerson(id) {
    return this.getMember(id) || this.getFriend(id) || this.getGuest(id);
  }
  /**
   * Determine whether a given member is currently signed in or not.
   *
   * @param {string} id - The ID to check (Member ID or Guest ID).
   */


  isPresent(id) {
    if ((0, _isObject2.default)(id) && id.id) id = id.id;
    const person = this.getPerson(id);
    return person && person.present;
  }

  findEvent(query) {
    return (0, _find2.default)(this.events, query);
  }

  findLastEvent(query) {
    return (0, _findLast2.default)(this.events, query);
  }

}
/*

Sessions represent the comings and goings of a particular membership
at a particular point in time.

Sessions are stored in NDJSON as a series of events:

    { event : 'member-in', memberId, time, ident }

Events that may be included:

 - member-in        - Someone added themselves to a session
 - member-out       - Someone removed themselves from a session
 - family-in        - Someone added a family member to a session
 - family-out       - Someone removed a family member from a session
 - friend-in        - Someone added a guest to a session
 - friend-out       - Someone removed a guest from a session
 - guest-in         - Someone added a guest to a session
 - guest-out        - Someone removed a guest from a session

Common event properties:
 - event           - Type of event
 - time            - Timestamp of event
 - card            - Card that was swiped to initiate an event
 - station         - Station where the event happened
 - ident           - Identity of the person who initiated the event
 - ident.memberId  - The Member ID of the member that initiated the event
 - ident.card      - The card that identified the member

NOTES:
 - It's possible for the `ident.memberId` field of an event to not be
   a member of the associated membership, if they were signed in or
   out by a staff member, for example.  It's also possible for the
   `ident.memberId` field to be `SYSTEM` if they were signed out by
   a system activity (for example, when everyone is automatically
   signed out by a `facility-closed` event).

*/


exports.Session = Session;
//# sourceMappingURL=Session.js.map