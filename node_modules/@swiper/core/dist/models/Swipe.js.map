{"version":3,"sources":["../../src/models/Swipe.js"],"names":["Swipe","Model","sessionId","session","id","constructor","options","opts","Session","member","getMember","memberId","membership","readerTime","_readerTime","time","to_time","emitTime","_emitTime","serverTime","_serverTime","getDefaultAction","isPresent","event","label","moment","isMoment","unix","getTime","Error"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { Member } from './Member';\nimport { Membership } from './Membership';\nimport { Session } from './Session';\nimport { log } from '../log';\nimport { Model } from './Model';\nimport moment from 'moment';\nimport { getApp } from '../app';\n\nexport class Swipe extends Model {\n\n  /**\n   * @property id\n   *\n   * Unique Swipe ID.\n   *\n   * @type {string}\n   */\n\n  /**\n   * @property stationId\n   *\n   * The id of the station that originated this event.\n   *\n   * @type {string}\n   */\n\n  /**\n   * @property error\n   *\n   * Error message, if there was a problem with this event.\n   *\n   * @type {string}\n   */\n\n  /**\n   * @property memberId\n   *\n   * The Member ID of the user that initiated this event.\n   *\n   * @type {string}\n   */\n\n  /**\n   * @property membershipId\n   *\n   * The Membership ID that this event is associated to.\n   *\n   * @type {string}\n   */\n\n  /**\n   * @property sessionId\n   *\n   * The Session ID that this event is associated to.\n   *\n   * @type {string}\n   */\n  get sessionId() { return this.session.id; }\n\n  /**\n   * @property session\n   *\n   * The Session that this event is associated to.\n   *\n   * @type {Session}\n   */\n\n  /**\n   * @property member\n   *\n   * Member record.  Will be populated when this event is sent to\n   * a browser, if the event has a `memberId`.\n   *\n   * @type {Member}\n   */\n\n  /**\n   * @property card\n   *\n   * The card that was swiped.\n   *\n   * @type {string}\n   */\n\n  /**\n   * @property valid\n   *\n   * Is this a good swipe for a valid card?\n   *\n   * @type {boolean}\n   */\n\n  constructor( options={} ) {\n    const { session, ...opts } = options;\n    super( opts );\n    if ( session ) this.session = new Session( session );\n  }\n\n  /**\n   * The member object for the member associated with this swipe.\n   *\n   * @type {Member}\n   */\n  get member() {\n    return this.session && this.session.getMember( this.memberId );\n  }\n\n  /**\n   * The membership object for the membership associated with this swipe.\n   *\n   * @type {Membership}\n   */\n  get membership() { return this.session && this.session.membership; }\n\n  /**\n   * Time that the event was collected by the reader.\n   *\n   * @type {moment}\n   */\n  get readerTime() { return moment( this._readerTime ); }\n  set readerTime( time ) { this._readerTime = to_time( time ); }\n\n  /**\n   * Time that the event was emitted to the server from the reader.\n   *\n   * @type {moment}\n   */\n  get emitTime() { return moment( this._emitTime ); }\n  set emitTime( time ) { this._emitTime = to_time( time ); }\n\n  /**\n   * Time that the event was processed and validated by the server.\n   *\n   * @type {moment}\n   */\n  get serverTime() { return moment( this._serverTime ); }\n  set serverTime( time ) { this._serverTime = to_time( time ); }\n\n  getDefaultAction() {\n    if ( this.session ) {\n      // There is an active session for this membership\n      if ( this.session.isPresent( this.memberId ) ) {\n        // TODO - If the swiping member is the only adult present, then\n        // default to \"sign everyone out\"\n        // The member that has swiped is part of that session\n        return {\n          event     : 'member-out',\n          memberId  : this.memberId,\n          label     : 'sign out',\n        };\n      } else {\n        // The member that has swiped is not part of that session\n        return {\n          event     : 'member-out',\n          memberId  : this.memberId,\n          label     : 'sign in',\n        };\n      }\n    } else {\n      return {\n        event     : 'member-in',\n        memberId  : this.memberId,\n        label     : 'sign in',\n      };\n    }\n  }\n\n  /*\n  get ident() {\n    // TODO - allow for other ident methods\n    return _.pick( this, 'memberId', 'card' );\n  }\n\n  send( data ) {\n    _.assign( data, {\n      membershipId    : this.membershipId,\n      sessionId       : this.id,\n      ident           : this.ident,\n    } );\n    // log.debug( 'SENDING SWIPE RESPONSE', data );\n    return this.constructor.sender( this.sessionId, data ).then( newdata => {\n      this.session = new Session( newdata );\n      this.emit( 'updated', this );\n      return this.session;\n    } );\n  }\n\n  static sender( id, data ) {\n    return getApp().service( 'sessions' ).patch( id, data );\n    / *\n    const request = require( 'request-promise' );\n    return request( {\n      method    : 'POST',\n      baseUrl   : 'http://localhost:4000/',\n      uri       : `/swipes/${id}`,\n      json      : true,\n      simple    : true,\n      body      : data,\n    } ).then( res => this.hydrate( res ) );\n    * /\n  }\n  */\n\n}\n\nfunction to_time( time ) {\n  if ( _.isNil( time ) || _.isNumber( time ) ) return time;\n  if ( moment.isMoment( time ) ) return time.unix();\n  if ( _.isDate( time ) ) return ( time.getTime() / 1000 );\n  throw new Error( `Invalid date/time \"${time}\"` );\n}\n"],"file":"Swipe.js"}