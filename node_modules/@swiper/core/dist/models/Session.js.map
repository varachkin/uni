{"version":3,"sources":["../../src/models/Session.js"],"names":["Session","Model","membershipId","id","split","constructor","options","rebuild","members","friends","guests","opts","member","Member","relation","friend","guest","Guest","people","person","displayName","firstName","name","concat","getMember","getFriend","getGuest","getPerson","isPresent","present","findEvent","query","events","findLastEvent"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { Model } from './Model';\nimport { Guest } from './Guest';\nimport { Member } from './Member';\nimport { Membership } from './Membership';\nimport { Swipe } from './Swipe';\n// import { log } from '../log';\n\nexport class Session extends Model {\n\n  /**\n   * @property id\n   *\n   * The Session ID.\n   *\n   * @type {string}\n   */\n\n  /**\n   * @property swipe\n   *\n   * The Swipe event that initiated the interaction with this session.\n   * This is needed internally to implement some of the `send`\n   * functionality, but should not be needed otherwise.\n   *\n   * @type {Swipe}\n   */\n\n  /**\n   * @property membershipId\n   *\n   * The membership id associated with this session.\n   *\n   * @type {string}\n   */\n  get membershipId() { return this.id.split( '@' )[1]; }\n\n  /**\n   * @property membership\n   *\n   * The membership associated with this session.\n   *\n   * @type {Membership}\n   */\n\n  /**\n   * @property members\n   *\n   * Member records of members associated with the membership of this\n   * session..\n   *\n   * @type {Member[]}\n   */\n\n  /**\n   * @property friends\n   *\n   * Member records of friends that are associated with this session.\n   *\n   * @type {Member[]}\n   */\n\n  /**\n   * @property guests\n   *\n   * Guest records of guests that are associated with this session.\n   *\n   * @type {Guest[]}\n   */\n\n  /**\n   * @property events\n   *\n   * Events of this session.\n   *\n   * @type {object[]}\n   */\n\n  constructor( options={} ) {\n    super( {} );\n    this.rebuild( options );\n  }\n\n  rebuild( options={} ) {\n    const { members, friends, guests, ...opts } = options;\n    _.assign( this, opts );\n    this.members = _.map( members, member => {\n      return new Member( { ...member, relation : 'family' } );\n    } );\n    this.friends = _.map( friends, friend => {\n      return new Member( { ...friend, relation : 'friend' } );\n    } );\n    this.guests = _.map( guests, guest => {\n      return new Guest( { ...guest, relation : 'guest' } );\n    } );\n    _.each( this.people, person => {\n      if ( ! person.displayName ) {\n        // TODO - Make the options for what populates displayName\n        // configurable\n        person.displayName = person.firstName || person.name;\n      }\n    } );\n  }\n\n  get people() {\n    return [].concat( this.members, this.friends, this.guests );\n  }\n\n  getMember( id ) { return _.find( this.members, { id } ); }\n  getFriend( id ) { return _.find( this.friends, { id } ); }\n  getGuest( id ) { return _.find( this.guests, { id } ); }\n\n  getPerson( id ) {\n    return this.getMember( id )\n      || this.getFriend( id )\n      || this.getGuest( id );\n  }\n\n  /**\n   * Determine whether a given member is currently signed in or not.\n   *\n   * @param {string} id - The ID to check (Member ID or Guest ID).\n   */\n  isPresent( id ) {\n    if ( _.isObject( id ) && id.id ) id = id.id;\n    const person = this.getPerson( id );\n    return person && person.present;\n  }\n\n  findEvent( query ) { return _.find( this.events, query ); }\n  findLastEvent( query ) { return _.findLast( this.events, query ); }\n}\n\n/*\n\nSessions represent the comings and goings of a particular membership\nat a particular point in time.\n\nSessions are stored in NDJSON as a series of events:\n\n    { event : 'member-in', memberId, time, ident }\n\nEvents that may be included:\n\n - member-in        - Someone added themselves to a session\n - member-out       - Someone removed themselves from a session\n - family-in        - Someone added a family member to a session\n - family-out       - Someone removed a family member from a session\n - friend-in        - Someone added a guest to a session\n - friend-out       - Someone removed a guest from a session\n - guest-in         - Someone added a guest to a session\n - guest-out        - Someone removed a guest from a session\n\nCommon event properties:\n - event           - Type of event\n - time            - Timestamp of event\n - card            - Card that was swiped to initiate an event\n - station         - Station where the event happened\n - ident           - Identity of the person who initiated the event\n - ident.memberId  - The Member ID of the member that initiated the event\n - ident.card      - The card that identified the member\n\nNOTES:\n - It's possible for the `ident.memberId` field of an event to not be\n   a member of the associated membership, if they were signed in or\n   out by a staff member, for example.  It's also possible for the\n   `ident.memberId` field to be `SYSTEM` if they were signed out by\n   a system activity (for example, when everyone is automatically\n   signed out by a `facility-closed` event).\n\n*/\n"],"file":"Session.js"}