"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Model = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _flattenDeep2 = _interopRequireDefault(require("lodash/flattenDeep"));

var _mapKeys2 = _interopRequireDefault(require("lodash/mapKeys"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _pickBy2 = _interopRequireDefault(require("lodash/pickBy"));

var _includes2 = _interopRequireDefault(require("lodash/includes"));

var _some2 = _interopRequireDefault(require("lodash/some"));

var _defaults2 = _interopRequireDefault(require("lodash/defaults"));

var _assign2 = _interopRequireDefault(require("lodash/assign"));

var _events = require("events");

class Model extends _events.EventEmitter {
  constructor(...opts) {
    super();
    (0, _assign2.default)(this, ...opts);
    (0, _defaults2.default)(this, {
      flags: []
    });
  }

  flag(...names) {
    return (0, _some2.default)(names, name => (0, _includes2.default)(this.flags, name));
  }

  toJSON() {
    const data = (0, _pickBy2.default)(this, (val, key) => {
      if ((0, _isNil2.default)(val)) return false;
      if ((0, _isFunction2.default)(val)) return false;
      if (key === 'events' || key === 'eventsCount') return false;
      return !(0, _includes2.default)(['_events', '_eventsCount'], key);
    });
    return (0, _mapKeys2.default)(data, (val, key) => key.replace(/^_/u, ''));
  }

  getValidators() {
    let iter = this;
    const validators = [];

    while (iter) {
      validators.push(iter.validators);
      iter = Object.getPrototypeOf(iter);
    }

    return (0, _flattenDeep2.default)(validators);
  }

  validate() {
    const validators = this.getValidators();
    const errors = (0, _compact2.default)((0, _map2.default)(validators, validator => {
      return validator.call(this, this);
    }));
    return errors;
  } // [ Symbol.for( 'nodejs.util.inspect.custom' ) ]() { return this.toJSON(); }


}

exports.Model = Model;
//# sourceMappingURL=Model.js.map